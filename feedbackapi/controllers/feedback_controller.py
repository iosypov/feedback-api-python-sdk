# -*- coding: utf-8 -*-

"""
feedbackapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from feedbackapi.api_helper import APIHelper
from feedbackapi.configuration import Server
from feedbackapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from feedbackapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from feedbackapi.models.feedback import Feedback
from feedbackapi.models.feedback_response import FeedbackResponse
from feedbackapi.exceptions.bad_request_exception import BadRequestException
from feedbackapi.exceptions.unauthorized_exception import UnauthorizedException
from feedbackapi.exceptions.too_many_requests_exception import TooManyRequestsException
from feedbackapi.exceptions.internal_server_error_exception import InternalServerErrorException
from feedbackapi.exceptions.not_found_exception import NotFoundException


class FeedbackController(BaseController):

    """A Controller to access Endpoints in the feedbackapi API."""
    def __init__(self, config):
        super(FeedbackController, self).__init__(config)

    def create_feedback(self,
                        body):
        """Does a POST request to /feedback.

        ### Create a new feedback
        You can explore sample payloads below.
        Every feedback must have at least one properties:
          - `rating`: numeric value (star rating)
          - `sentiment`: boolean value (like/dislike button)
          - `reasons`: list of text values (multiple choice questions)
          - `suggestion`: text value (free text input)
        In addition, you may provide any of context values:
          - `userId`: string value (for logged in users, we'll generate one
          for anonymous users)
          - `page`: text value (url of the page where the feedback was given)
          - `category`: text value (category of the page where the feedback
          was given)
          - `apiOperationId`: text value (operationId for OpenAPI docs)
          - `tags`: list of text values (product name, feature name, etc.)

        Args:
            body (FeedbackReq): TODO: type description here.

        Returns:
            Feedback: Response from the API. Created

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/feedback')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Feedback.from_dictionary)
            .local_error('400', 'Bad Request', BadRequestException)
            .local_error('401', 'Unauthorized', UnauthorizedException)
            .local_error('429', 'Too Many Requests', TooManyRequestsException)
            .local_error('500', 'Internal Server Error', InternalServerErrorException)
        ).execute()

    def get_feedback(self,
                     x_api_key,
                     rating=None,
                     sentiment=None,
                     reasons=None,
                     user_id=None,
                     user_ip=None,
                     page=None,
                     category=None,
                     api_operation_id=None,
                     tags=None,
                     x_page=1,
                     x_per_page=50,
                     x_order='desc',
                     x_order_by='createdAt'):
        """Does a GET request to /feedback.

        Get feedback.

        Args:
            x_api_key (string): Private key. Create a tenant to generate.
            rating (list of float, optional): Rating to filter by.
            sentiment (list of bool, optional): Sentiment to filter by.
            reasons (list of string, optional): Reasons to filter by.
            user_id (list of string, optional): User ID to filter by.
            user_ip (list of string, optional): IP address to filter by.
            page (list of string, optional): Page to filter by.
            category (list of string, optional): Category to filter by.
            api_operation_id (list of string, optional): Operation to filter
                by.
            tags (list of string, optional): Tags to filter by.
            x_page (float, optional): Page number.
            x_per_page (float, optional): Items per page.
            x_order (XORDEREnum, optional): Sort order.
            x_order_by (XORDERBYEnum, optional): Order by.

        Returns:
            FeedbackResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/feedback')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('X-API-KEY')
                          .value(x_api_key))
            .query_param(Parameter()
                         .key('rating')
                         .value(rating))
            .query_param(Parameter()
                         .key('sentiment')
                         .value(sentiment))
            .query_param(Parameter()
                         .key('reasons')
                         .value(reasons))
            .query_param(Parameter()
                         .key('userId')
                         .value(user_id))
            .query_param(Parameter()
                         .key('userIP')
                         .value(user_ip))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('category')
                         .value(category))
            .query_param(Parameter()
                         .key('apiOperationId')
                         .value(api_operation_id))
            .query_param(Parameter()
                         .key('tags')
                         .value(tags))
            .header_param(Parameter()
                          .key('X-PAGE')
                          .value(x_page))
            .header_param(Parameter()
                          .key('X-PER-PAGE')
                          .value(x_per_page))
            .header_param(Parameter()
                          .key('X-ORDER')
                          .value(x_order))
            .header_param(Parameter()
                          .key('X-ORDER-BY')
                          .value(x_order_by))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(FeedbackResponse.from_dictionary)
            .local_error('401', 'Unauthorized', UnauthorizedException)
            .local_error('429', 'Too Many Requests', TooManyRequestsException)
            .local_error('500', 'Internal Server Error', InternalServerErrorException)
        ).execute()

    def get_feedback_by_id(self,
                           id,
                           x_api_key):
        """Does a GET request to /feedback/{id}.

        Get feedback by id.

        Args:
            id (string): Resource identifier string.
            x_api_key (string): Private key. Create a tenant to generate.

        Returns:
            Feedback: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/feedback/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('X-API-KEY')
                          .value(x_api_key))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Feedback.from_dictionary)
            .local_error('400', 'Bad Request', BadRequestException)
            .local_error('401', 'Unauthorized', UnauthorizedException)
            .local_error('404', 'Not found', NotFoundException)
            .local_error('429', 'Too Many Requests', TooManyRequestsException)
            .local_error('500', 'Internal Server Error', InternalServerErrorException)
        ).execute()

    def update_feedback_by_id(self,
                              id,
                              body):
        """Does a PUT request to /feedback/{id}.

        Update feedback by id.

        Args:
            id (string): Resource identifier string.
            body (FeedbackReq): TODO: type description here.

        Returns:
            Feedback: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/feedback/{id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Feedback.from_dictionary)
            .local_error('400', 'Bad Request', BadRequestException)
            .local_error('401', 'Unauthorized', UnauthorizedException)
            .local_error('404', 'Not found', NotFoundException)
            .local_error('429', 'Too Many Requests', TooManyRequestsException)
            .local_error('500', 'Internal Server Error', InternalServerErrorException)
        ).execute()
