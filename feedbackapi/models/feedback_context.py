# -*- coding: utf-8 -*-

"""
feedbackapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from feedbackapi.api_helper import APIHelper


class FeedbackContext(object):

    """Implementation of the 'FeedbackContext' model.

    Feedback object.

    Attributes:
        page (string): Page of the feedback.
        category (string): Category of the feedback.
        api_operation_id (string): operationId of the API.
        tags (list of string): Any list of tags to group feedbacks by.
        user_id (string): Unique identifier of the user.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "page": 'page',
        "category": 'category',
        "api_operation_id": 'apiOperationId',
        "tags": 'tags',
        "user_id": 'userId'
    }

    _optionals = [
        'page',
        'category',
        'api_operation_id',
        'tags',
        'user_id',
    ]

    def __init__(self,
                 page=APIHelper.SKIP,
                 category=APIHelper.SKIP,
                 api_operation_id=APIHelper.SKIP,
                 tags=None,
                 user_id=APIHelper.SKIP):
        """Constructor for the FeedbackContext class"""

        # Initialize members of the class
        if page is not APIHelper.SKIP:
            self.page = page 
        if category is not APIHelper.SKIP:
            self.category = category 
        if api_operation_id is not APIHelper.SKIP:
            self.api_operation_id = api_operation_id 
        self.tags = tags 
        if user_id is not APIHelper.SKIP:
            self.user_id = user_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        page = dictionary.get("page") if dictionary.get("page") else APIHelper.SKIP
        category = dictionary.get("category") if dictionary.get("category") else APIHelper.SKIP
        api_operation_id = dictionary.get("apiOperationId") if dictionary.get("apiOperationId") else APIHelper.SKIP
        tags = dictionary.get("tags") if dictionary.get("tags") else None
        user_id = dictionary.get("userId") if dictionary.get("userId") else APIHelper.SKIP
        # Return an object of this model
        return cls(page,
                   category,
                   api_operation_id,
                   tags,
                   user_id)
