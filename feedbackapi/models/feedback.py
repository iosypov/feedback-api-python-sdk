# -*- coding: utf-8 -*-

"""
feedbackapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from feedbackapi.api_helper import APIHelper


class Feedback(object):

    """Implementation of the 'Feedback' model.

    TODO: type model description here.

    Attributes:
        rating (float): Rating of the feedback.
        sentiment (bool): Sentiment of the feedback.
        reasons (list of string): Reasons of the feedback.
        suggestion (string): Suggestion of the feedback.
        page (string): Page of the feedback.
        category (string): Category of the feedback.
        api_operation_id (string): operationId of the API.
        tags (list of string): Any list of tags to group feedbacks by.
        user_id (string): Unique identifier of the user.
        id (string): Unique identifier of the feedback.
        created_at (datetime): Date of the feedback creation.
        updated_at (datetime): Date of the feedback update.
        user_ip (string): IP address of the user.
        user_agent (string): User agent of the device.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "created_at": 'createdAt',
        "user_ip": 'userIP',
        "user_agent": 'userAgent',
        "rating": 'rating',
        "sentiment": 'sentiment',
        "reasons": 'reasons',
        "suggestion": 'suggestion',
        "page": 'page',
        "category": 'category',
        "api_operation_id": 'apiOperationId',
        "tags": 'tags',
        "user_id": 'userId',
        "updated_at": 'updatedAt'
    }

    _optionals = [
        'rating',
        'sentiment',
        'reasons',
        'suggestion',
        'page',
        'category',
        'api_operation_id',
        'tags',
        'user_id',
        'updated_at',
    ]

    def __init__(self,
                 id=None,
                 created_at=None,
                 user_ip=None,
                 user_agent=None,
                 rating=APIHelper.SKIP,
                 sentiment=APIHelper.SKIP,
                 reasons=APIHelper.SKIP,
                 suggestion=APIHelper.SKIP,
                 page=APIHelper.SKIP,
                 category=APIHelper.SKIP,
                 api_operation_id=APIHelper.SKIP,
                 tags=None,
                 user_id=APIHelper.SKIP,
                 updated_at=APIHelper.SKIP):
        """Constructor for the Feedback class"""

        # Initialize members of the class
        if rating is not APIHelper.SKIP:
            self.rating = rating 
        if sentiment is not APIHelper.SKIP:
            self.sentiment = sentiment 
        if reasons is not APIHelper.SKIP:
            self.reasons = reasons 
        if suggestion is not APIHelper.SKIP:
            self.suggestion = suggestion 
        if page is not APIHelper.SKIP:
            self.page = page 
        if category is not APIHelper.SKIP:
            self.category = category 
        if api_operation_id is not APIHelper.SKIP:
            self.api_operation_id = api_operation_id 
        self.tags = tags 
        if user_id is not APIHelper.SKIP:
            self.user_id = user_id 
        self.id = id 
        self.created_at = APIHelper.RFC3339DateTime(created_at) if created_at else None 
        if updated_at is not APIHelper.SKIP:
            self.updated_at = APIHelper.RFC3339DateTime(updated_at) if updated_at else None 
        self.user_ip = user_ip 
        self.user_agent = user_agent 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else None
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdAt")).datetime if dictionary.get("createdAt") else None
        user_ip = dictionary.get("userIP") if dictionary.get("userIP") else None
        user_agent = dictionary.get("userAgent") if dictionary.get("userAgent") else None
        rating = dictionary.get("rating") if dictionary.get("rating") else APIHelper.SKIP
        sentiment = dictionary.get("sentiment") if "sentiment" in dictionary.keys() else APIHelper.SKIP
        reasons = dictionary.get("reasons") if dictionary.get("reasons") else APIHelper.SKIP
        suggestion = dictionary.get("suggestion") if dictionary.get("suggestion") else APIHelper.SKIP
        page = dictionary.get("page") if dictionary.get("page") else APIHelper.SKIP
        category = dictionary.get("category") if dictionary.get("category") else APIHelper.SKIP
        api_operation_id = dictionary.get("apiOperationId") if dictionary.get("apiOperationId") else APIHelper.SKIP
        tags = dictionary.get("tags") if dictionary.get("tags") else None
        user_id = dictionary.get("userId") if dictionary.get("userId") else APIHelper.SKIP
        updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updatedAt")).datetime if dictionary.get("updatedAt") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   created_at,
                   user_ip,
                   user_agent,
                   rating,
                   sentiment,
                   reasons,
                   suggestion,
                   page,
                   category,
                   api_operation_id,
                   tags,
                   user_id,
                   updated_at)
