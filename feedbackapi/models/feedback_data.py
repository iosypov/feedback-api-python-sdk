# -*- coding: utf-8 -*-

"""
feedbackapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from feedbackapi.api_helper import APIHelper


class FeedbackData(object):

    """Implementation of the 'FeedbackData' model.

    Feedback object.

    Attributes:
        rating (float): Rating of the feedback.
        sentiment (bool): Sentiment of the feedback.
        reasons (list of string): Reasons of the feedback.
        suggestion (string): Suggestion of the feedback.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "rating": 'rating',
        "sentiment": 'sentiment',
        "reasons": 'reasons',
        "suggestion": 'suggestion'
    }

    _optionals = [
        'rating',
        'sentiment',
        'reasons',
        'suggestion',
    ]

    def __init__(self,
                 rating=APIHelper.SKIP,
                 sentiment=APIHelper.SKIP,
                 reasons=APIHelper.SKIP,
                 suggestion=APIHelper.SKIP):
        """Constructor for the FeedbackData class"""

        # Initialize members of the class
        if rating is not APIHelper.SKIP:
            self.rating = rating 
        if sentiment is not APIHelper.SKIP:
            self.sentiment = sentiment 
        if reasons is not APIHelper.SKIP:
            self.reasons = reasons 
        if suggestion is not APIHelper.SKIP:
            self.suggestion = suggestion 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        rating = dictionary.get("rating") if dictionary.get("rating") else APIHelper.SKIP
        sentiment = dictionary.get("sentiment") if "sentiment" in dictionary.keys() else APIHelper.SKIP
        reasons = dictionary.get("reasons") if dictionary.get("reasons") else APIHelper.SKIP
        suggestion = dictionary.get("suggestion") if dictionary.get("suggestion") else APIHelper.SKIP
        # Return an object of this model
        return cls(rating,
                   sentiment,
                   reasons,
                   suggestion)
