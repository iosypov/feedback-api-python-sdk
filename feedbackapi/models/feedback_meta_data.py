# -*- coding: utf-8 -*-

"""
feedbackapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from feedbackapi.api_helper import APIHelper


class FeedbackMetaData(object):

    """Implementation of the 'FeedbackMetaData' model.

    Feedback object.

    Attributes:
        id (string): Unique identifier of the feedback.
        created_at (datetime): Date of the feedback creation.
        updated_at (datetime): Date of the feedback update.
        user_ip (string): IP address of the user.
        user_agent (string): User agent of the device.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "created_at": 'createdAt',
        "user_ip": 'userIP',
        "user_agent": 'userAgent',
        "updated_at": 'updatedAt'
    }

    _optionals = [
        'updated_at',
    ]

    def __init__(self,
                 id=None,
                 created_at=None,
                 user_ip=None,
                 user_agent=None,
                 updated_at=APIHelper.SKIP):
        """Constructor for the FeedbackMetaData class"""

        # Initialize members of the class
        self.id = id 
        self.created_at = APIHelper.RFC3339DateTime(created_at) if created_at else None 
        if updated_at is not APIHelper.SKIP:
            self.updated_at = APIHelper.RFC3339DateTime(updated_at) if updated_at else None 
        self.user_ip = user_ip 
        self.user_agent = user_agent 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else None
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdAt")).datetime if dictionary.get("createdAt") else None
        user_ip = dictionary.get("userIP") if dictionary.get("userIP") else None
        user_agent = dictionary.get("userAgent") if dictionary.get("userAgent") else None
        updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updatedAt")).datetime if dictionary.get("updatedAt") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   created_at,
                   user_ip,
                   user_agent,
                   updated_at)
